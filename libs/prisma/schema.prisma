generator client {
  provider = "prisma-client-js"
}

//프로덕션 데이터소스
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

//개발 데이터소스
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts        Post[]
  postLikes    PostLike[]
  comments     Comment[]
  commentLikes CommentLike[]
}

model Category {
  id   String @id @default(uuid())
  name String

  parentId String?
  parent   Category?  @relation("categories", fields: [parentId], references: [id])
  children Category[] @relation("categories")
  posts    Post[]
}

model Post {
  id        String   @id @default(uuid())
  title     String
  content   String
  published Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postLikes  PostLike[]
  comments   Comment[]
  authorId   String
  author     User       @relation(fields: [authorId], references: [id])
  categoryId String
  category   Category   @relation(fields: [categoryId], references: [id])
}

model PostLike {
  id String @id @default(uuid())

  postId String
  post   Post   @relation(fields: [postId], references: [id])
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Comment {
  id        String  @id @default(uuid())
  content   String
  published Boolean

  commentLikes CommentLike[]
  authorId     String
  author       User          @relation(fields: [authorId], references: [id])
  postId       String
  post         Post          @relation(fields: [postId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model CommentLike {
  id String @id @default(uuid())

  commentId String
  Comment   Comment @relation(fields: [commentId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])
}
